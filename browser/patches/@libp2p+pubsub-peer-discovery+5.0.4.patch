diff --git a/node_modules/@libp2p/pubsub-peer-discovery/dist/src/index.js b/node_modules/@libp2p/pubsub-peer-discovery/dist/src/index.js
index 6d0dadb..e8d415e 100644
--- a/node_modules/@libp2p/pubsub-peer-discovery/dist/src/index.js
+++ b/node_modules/@libp2p/pubsub-peer-discovery/dist/src/index.js
@@ -13,6 +13,7 @@ export const TOPIC = '_peer-discovery._p2p._pubsub';
 export class PubSubPeerDiscovery extends EventEmitter {
     constructor(init = {}) {
         super();
+        console.log("whatup 5")
         this.components = new Components();
         const { interval, topics, listenOnly } = init;
         this.interval = interval ?? 10000;
@@ -24,6 +25,7 @@ export class PubSubPeerDiscovery extends EventEmitter {
         else {
             this.topics = [TOPIC];
         }
+        console.log("nowoww")
         this._onMessage = this._onMessage.bind(this);
     }
     get [symbol]() {
@@ -39,22 +41,27 @@ export class PubSubPeerDiscovery extends EventEmitter {
         return this.intervalId != null;
     }
     start() {
+        console.log("whygod")
     }
     /**
      * Subscribes to the discovery topic on `libp2p.pubsub` and performs a broadcast
      * immediately, and every `this.interval`
      */
     afterStart() {
+        console.log("starting")
         if (this.intervalId != null) {
             return;
         }
+        console.log("why")
         const pubsub = this.components.getPubSub();
         if (pubsub == null) {
             throw new Error('PubSub not configured');
         }
+        console.log("now")
         // Subscribe to pubsub
         for (const topic of this.topics) {
             pubsub.subscribe(topic);
+            console.log("listening a message, whats up")
             pubsub.addEventListener('message', this._onMessage);
         }
         // Don't broadcast if we are only listening
@@ -91,6 +98,7 @@ export class PubSubPeerDiscovery extends EventEmitter {
      * Performs a broadcast via Pubsub publish
      */
     _broadcast() {
+        console.log('broadcasting')
         const peerId = this.components.getPeerId();
         if (peerId.publicKey == null) {
             throw new Error('PeerId was missing public key');
@@ -106,15 +114,15 @@ export class PubSubPeerDiscovery extends EventEmitter {
         }
         for (const topic of this.topics) {
             log('broadcasting our peer data on topic %s', topic);
-            pubsub.dispatchEvent(new CustomEvent('message', {
-                detail: encodedPeer
-            }));
+            console.log("bout to publish")
+            pubsub.publish(topic, encodedPeer)
         }
     }
     /**
      * Handles incoming pubsub messages for our discovery topic
      */
     _onMessage(event) {
+        console.log("getting a message")
         if (!this.isStarted()) {
             return;
         }
@@ -129,6 +137,7 @@ export class PubSubPeerDiscovery extends EventEmitter {
                 return;
             }
             log('discovered peer %p on %s', peerId, message.topic);
+            console.log("receiving")
             this.dispatchEvent(new CustomEvent('peer', {
                 detail: {
                     id: peerId,
diff --git a/node_modules/@libp2p/pubsub-peer-discovery/src/index.ts b/node_modules/@libp2p/pubsub-peer-discovery/src/index.ts
index 9f9b929..ca206ab 100644
--- a/node_modules/@libp2p/pubsub-peer-discovery/src/index.ts
+++ b/node_modules/@libp2p/pubsub-peer-discovery/src/index.ts
@@ -42,7 +42,7 @@ export class PubSubPeerDiscovery extends EventEmitter<PeerDiscoveryEvents> imple
 
   constructor (init: PubsubPeerDiscoveryInit = {}) {
     super()
-
+console.log("whatup 6")
     const {
       interval,
       topics,
@@ -164,9 +164,8 @@ export class PubSubPeerDiscovery extends EventEmitter<PeerDiscoveryEvents> imple
 
     for (const topic of this.topics) {
       log('broadcasting our peer data on topic %s', topic)
-      pubsub.dispatchEvent(new CustomEvent('message', {
-        detail: encodedPeer
-      }))
+      console.log("why")
+      pubsub.publish(topic, encodedPeer)
     }
   }
 
@@ -193,7 +192,7 @@ export class PubSubPeerDiscovery extends EventEmitter<PeerDiscoveryEvents> imple
       }
 
       log('discovered peer %p on %s', peerId, message.topic)
-
+      console.log("not")
       this.dispatchEvent(new CustomEvent<PeerInfo>('peer', {
         detail: {
           id: peerId,
