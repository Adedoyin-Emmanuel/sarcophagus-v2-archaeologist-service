/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EmbalmerFacetInterface extends ethers.utils.Interface {
  functions: {
    "burySarcophagus(bytes32)": FunctionFragment;
    "createSarcophagus(bytes32,(string,address,uint256,bool,uint8),tuple[],string[])": FunctionFragment;
    "rewrapSarcophagus(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burySarcophagus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSarcophagus",
    values: [
      BytesLike,
      {
        name: string;
        recipient: string;
        resurrectionTime: BigNumberish;
        canBeTransferred: boolean;
        minShards: BigNumberish;
      },
      {
        archAddress: string;
        diggingFee: BigNumberish;
        unencryptedShardDoubleHash: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewrapSarcophagus",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "burySarcophagus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSarcophagus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewrapSarcophagus",
    data: BytesLike
  ): Result;

  events: {
    "BurySarcophagus(bytes32)": EventFragment;
    "CreateSarcophagus(bytes32,string,bool,uint256,address,address,address[],uint256,string[])": EventFragment;
    "RewrapSarcophagus(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurySarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateSarcophagus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewrapSarcophagus"): EventFragment;
}

export type BurySarcophagusEvent = TypedEvent<[string] & { sarcoId: string }>;

export type CreateSarcophagusEvent = TypedEvent<
  [
    string,
    string,
    boolean,
    BigNumber,
    string,
    string,
    string[],
    BigNumber,
    string[]
  ] & {
    sarcoId: string;
    name: string;
    canBeTransferred: boolean;
    resurrectionTime: BigNumber;
    embalmer: string;
    recipient: string;
    cursedArchaeologists: string[];
    totalFees: BigNumber;
    arweaveTxIds: string[];
  }
>;

export type RewrapSarcophagusEvent = TypedEvent<
  [string, BigNumber] & { sarcoId: string; resurrectionTime: BigNumber }
>;

export class EmbalmerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EmbalmerFacetInterface;

  functions: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSarcophagus(
      sarcoId: BytesLike,
      sarcophagus: {
        name: string;
        recipient: string;
        resurrectionTime: BigNumberish;
        canBeTransferred: boolean;
        minShards: BigNumberish;
      },
      selectedArchaeologists: {
        archAddress: string;
        diggingFee: BigNumberish;
        unencryptedShardDoubleHash: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveTxIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burySarcophagus(
    sarcoId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSarcophagus(
    sarcoId: BytesLike,
    sarcophagus: {
      name: string;
      recipient: string;
      resurrectionTime: BigNumberish;
      canBeTransferred: boolean;
      minShards: BigNumberish;
    },
    selectedArchaeologists: {
      archAddress: string;
      diggingFee: BigNumberish;
      unencryptedShardDoubleHash: BytesLike;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    }[],
    arweaveTxIds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewrapSarcophagus(
    sarcoId: BytesLike,
    resurrectionTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createSarcophagus(
      sarcoId: BytesLike,
      sarcophagus: {
        name: string;
        recipient: string;
        resurrectionTime: BigNumberish;
        canBeTransferred: boolean;
        minShards: BigNumberish;
      },
      selectedArchaeologists: {
        archAddress: string;
        diggingFee: BigNumberish;
        unencryptedShardDoubleHash: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveTxIds: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BurySarcophagus(bytes32)"(
      sarcoId?: BytesLike | null
    ): TypedEventFilter<[string], { sarcoId: string }>;

    BurySarcophagus(
      sarcoId?: BytesLike | null
    ): TypedEventFilter<[string], { sarcoId: string }>;

    "CreateSarcophagus(bytes32,string,bool,uint256,address,address,address[],uint256,string[])"(
      sarcoId?: BytesLike | null,
      name?: null,
      canBeTransferred?: null,
      resurrectionTime?: null,
      embalmer?: null,
      recipient?: null,
      cursedArchaeologists?: null,
      totalFees?: null,
      arweaveTxIds?: null
    ): TypedEventFilter<
      [
        string,
        string,
        boolean,
        BigNumber,
        string,
        string,
        string[],
        BigNumber,
        string[]
      ],
      {
        sarcoId: string;
        name: string;
        canBeTransferred: boolean;
        resurrectionTime: BigNumber;
        embalmer: string;
        recipient: string;
        cursedArchaeologists: string[];
        totalFees: BigNumber;
        arweaveTxIds: string[];
      }
    >;

    CreateSarcophagus(
      sarcoId?: BytesLike | null,
      name?: null,
      canBeTransferred?: null,
      resurrectionTime?: null,
      embalmer?: null,
      recipient?: null,
      cursedArchaeologists?: null,
      totalFees?: null,
      arweaveTxIds?: null
    ): TypedEventFilter<
      [
        string,
        string,
        boolean,
        BigNumber,
        string,
        string,
        string[],
        BigNumber,
        string[]
      ],
      {
        sarcoId: string;
        name: string;
        canBeTransferred: boolean;
        resurrectionTime: BigNumber;
        embalmer: string;
        recipient: string;
        cursedArchaeologists: string[];
        totalFees: BigNumber;
        arweaveTxIds: string[];
      }
    >;

    "RewrapSarcophagus(bytes32,uint256)"(
      sarcoId?: BytesLike | null,
      resurrectionTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sarcoId: string; resurrectionTime: BigNumber }
    >;

    RewrapSarcophagus(
      sarcoId?: BytesLike | null,
      resurrectionTime?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sarcoId: string; resurrectionTime: BigNumber }
    >;
  };

  estimateGas: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSarcophagus(
      sarcoId: BytesLike,
      sarcophagus: {
        name: string;
        recipient: string;
        resurrectionTime: BigNumberish;
        canBeTransferred: boolean;
        minShards: BigNumberish;
      },
      selectedArchaeologists: {
        archAddress: string;
        diggingFee: BigNumberish;
        unencryptedShardDoubleHash: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveTxIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burySarcophagus(
      sarcoId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSarcophagus(
      sarcoId: BytesLike,
      sarcophagus: {
        name: string;
        recipient: string;
        resurrectionTime: BigNumberish;
        canBeTransferred: boolean;
        minShards: BigNumberish;
      },
      selectedArchaeologists: {
        archAddress: string;
        diggingFee: BigNumberish;
        unencryptedShardDoubleHash: BytesLike;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      arweaveTxIds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewrapSarcophagus(
      sarcoId: BytesLike,
      resurrectionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
